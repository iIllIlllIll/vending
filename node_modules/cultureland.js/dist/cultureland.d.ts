import { AxiosInstance, AxiosProxyConfig } from "axios";
import { CookieJar } from "tough-cookie";
import Pin from "./pin.js";
import { CulturelandVoucher, CulturelandBalance, CulturelandCharge, CulturelandGift, CulturelandGiftLimit, CulturelandChangeCoupangCash, CulturelandChangeSmileCash, CulturelandGooglePlay, CulturelandUser, CulturelandMember, CulturelandCashLogs, CulturelandLogin, CulturelandLoginWithKeepLoginInfo } from "./types.js";
import CulturelandError from "./errors.js";
export default class Cultureland {
    cookieJar: CookieJar;
    client: AxiosInstance;
    proxy?: AxiosProxyConfig;
    /**
     * 컬쳐랜드 모바일웹을 자동화해주는 비공식 라이브러리입니다.
     * 로그인, 잔액조회, 충전, 선물, 전환 등 자주 사용되는 대부분의 기능을 지원합니다.
     * @param proxy 로그인 시 사용할 프록시
     * @example
     * // 프록시 미사용
     * const client = new Cultureland();
     *
     * // 프록시 사용
     * const proxiedClient = new Cultureland({ host: "localhost", port: 3000 });
     */
    constructor(proxy?: AxiosProxyConfig);
    /**
     * 컬쳐랜드상품권(모바일문화상품권, 16자리)의 정보를 가져옵니다.
     * 로그인이 필요합니다.
     * 계정당 일일 조회수 10회 한도가 있습니다.
     * @param pin 상품권의 핀번호
     * @example
     * await client.checkVoucher(new Pin("3110-0123-4567-8901"));
     * @returns `amount`: number - 상품권의 금액
     * @returns `balance`: number - 상품권의 잔액
     * @returns `certNo`: string - 상품권의 발행번호 (인증번호)
     * @returns `createdDate`: string - 상품권의 발행일 | `20241231`
     * @returns `expiryDate`: string - 상품권의 만료일 | `20291231`
     * @returns `spendHistory[].title`: string - 내역 제목
     * @returns `spendHistory[].merchantName`: string - 사용 가맹점 이름
     * @returns `spendHistory[].amount`: number - 사용 금액
     * @returns `spendHistory[].timestamp`: number - 내역 시간
     */
    checkVoucher(pin: Pin): Promise<CulturelandVoucher | CulturelandError>;
    /**
     * 컬쳐랜드 계정의 컬쳐캐쉬 잔액을 가져옵니다.
     * @example
     * await client.getBalance();
     * @returns `balance`: number - 사용 가능 금액
     * @returns `safeBalance`: number - 보관중인 금액 (안심금고)
     * @returns `totalBalance`: number - 총 잔액 (사용 가능 금액 + 보관중인 금액)
     */
    getBalance(): Promise<CulturelandBalance | CulturelandError>;
    /**
     * 컬쳐랜드상품권(모바일문화상품권) 및 문화상품권(18자리)을 컬쳐캐쉬로 충전합니다.
     * 지류/온라인문화상품권(18자리)은 2022.12.31 이전 발행 건만 충전 가능합니다.
     * @param pins 상품권(들)의 핀번호
     * @example
     * // 한 개의 핀번호 충전
     * await client.charge(new Pin("3110-0123-4567-8901"));
     *
     * // 여러개의 핀번호 충전
     * await client.charge([
     *     new Pin("3110-0123-4567-8901"),
     *     new Pin("3110-0123-4567-8901")
     * ]);
     * @returns `message`: string - 성공 여부 메시지 | `충전 완료`, `상품권지갑 보관`, `잔액이 0원인 상품권`, `상품권 번호 불일치`
     * @returns `amount`: number - 충전 금액
     */
    charge(pins: Pin | Pin[]): Promise<CulturelandCharge | CulturelandCharge[] | CulturelandError>;
    /**
     * 컬쳐캐쉬를 사용해 컬쳐랜드상품권(모바일문화상품권)을 본인 번호로 선물합니다.
     * @param amount 구매 금액 (최소 1천원부터 최대 5만원까지 100원 단위로 입력 가능)
     * @param quantity 구매 수량 (최대 5개)
     * @example
     * // 5000원권 1장을 나에게 선물
     * await client.gift(5000, 1);
     * @returns `pin`: Pin - 선물 바코드 번호
     * @returns `url`: string - 선물 바코드 URL
     */
    gift(amount: number, quantity?: number): Promise<CulturelandGift | CulturelandError>;
    /**
     * 선물하기 API에서 선물 한도를 가져옵니다.
     * @example
     * await client.getGiftLimit();
     * @returns `remain`: number - 잔여 선물 한도
     * @returns `limit`: number - 최대 선물 한도
     */
    getGiftLimit(): Promise<CulturelandGiftLimit | CulturelandError>;
    /**
     * 컬쳐캐쉬를 쿠팡캐시로 전환합니다.
     * 휴대폰본인인증회원만 이용 가능합니다.
     * 고객 부담 전환 수수료 6% 차감됩니다. (전환 비율 1:0.94)
     * 일 최대 10회 전환 가능합니다.
     * @param amount 전환 금액 (최소 1천원부터 월 최대 10만원까지 100원 단위로 입력 가능)
     * @example
     * // 컬쳐캐쉬 10000원 차감 & 쿠팡캐시 9400원 충전
     * const coupangCash = await client.changeCoupangCash(10000);
     * coupangCash.amount === 9400; // true
     * @returns `amount`: number - (전환 수수료 6%가 차감된) 전환된 금액
     */
    changeCoupangCash(amount: number): Promise<CulturelandChangeCoupangCash | CulturelandError>;
    /**
     * 컬쳐캐쉬를 스마일캐시로 전환합니다.
     * 휴대폰본인인증회원만 이용 가능합니다.
     * 고객 부담 전환 수수료 5% 과금됩니다. (전환 비율 1.05:1)
     * @param amount 전환 금액 (최소 1천원부터 월 최대 200만원까지 100원 단위로 입력 가능)
     * @example
     * // 컬쳐캐쉬 10500원 차감 & 스마일캐시 10000원 충전
     * const smileCash = await client.changeSmileCash(10000);
     * smileCash.amount === 10500; // true
     * @returns `amount`: number - (전환 수수료 5%가 과금된) 과금된 금액
     */
    changeSmileCash(amount: number): Promise<CulturelandChangeSmileCash | CulturelandError>;
    /**
     * 컬쳐캐쉬를 사용해 Google Play 기프트 코드를 본인 번호로 구매합니다.
     * 안심금고가 활성화되어 있어야 합니다.
     * 구매 금액의 3% 수수료가 발생됩니다. (전환 비율 1.03:1)
     * @param amount 구매 금액 (5천원, 1만원, 1만5천원, 3만원, 5만원, 10만원, 15만원, 20만원)
     * @param quantity 구매 수량 (최대 10개)
     * @example
     * // 10000원권 1장을 구매하여 나에게 전송, 컬쳐캐쉬 10300원 차감
     * await client.giftGooglePlay(10000, 1);
     * @returns `pin`: string - 기프트 코드 번호
     * @returns `url`: string - 자동 입력 URL
     * @returns `certNo`: string - 카드번호
     */
    giftGooglePlay(amount: number, quantity?: number): Promise<CulturelandGooglePlay[] | CulturelandError>;
    /**
     * 안심금고 API에서 유저 정보를 가져옵니다.
     * @example
     * await client.getUserInfo();
     * @returns `phone`: string - 휴대폰 번호
     * @returns `safeLevel`: number - 안심금고 레벨
     * @returns `safePassword`: boolean - 안심금고 비밀번호 여부
     * @returns `registerDate`: number - 가입일 타임스탬프
     * @returns `userId`: string - 컬쳐랜드 ID
     * @returns `userKey`: string - 유저 고유 번호
     * @returns `userIp`: string - 접속 IP
     * @returns `index`: number - 유저 고유 인덱스
     * @returns `category`: string - 유저 종류
     */
    getUserInfo(): Promise<CulturelandUser | CulturelandError>;
    /**
     * 내정보 페이지에서 멤버 정보를 가져옵니다.
     * @example
     * await client.getMemberInfo();
     * @returns `id`: string - 컬쳐랜드 ID
     * @returns `name`: string - 멤버의 이름 | `홍*동`
     * @returns `verificationLevel`: string - 멤버의 인증 등급 | `본인인증`
     */
    getMemberInfo(): Promise<CulturelandMember | CulturelandError>;
    /**
     * 컬쳐캐쉬 충전 / 사용 내역을 가져옵니다.
     * @param days 조회 일수
     * @param pageSize 한 페이지에 담길 내역 수 (default: 20)
     * @param page 페이지 (default: 1)
     * @example
     * // 최근 30일간의 내역 중 1페이지의 내역
     * await client.getCultureCashLogs(30, 20, 1);
     * @returns `[].title`: string - 내역 제목
     * @returns `[].merchantCode`: string - 사용 가맹점 코드
     * @returns `[].merchantName`: string - 사용 가맹점 이름
     * @returns `[].amount`: number - 사용 금액
     * @returns `[].balance`: number - 사용 후 남은 잔액
     * @returns `[].spendType`: string - 사용 종류 | `사용`, `사용취소`, `충전`
     * @returns `[].timestamp`: number - 내역 시간
     */
    getCultureCashLogs(days: number, pageSize?: number, page?: number): Promise<CulturelandCashLogs | CulturelandError>;
    /**
     * 현재 세션이 컬쳐랜드에 로그인되어 있는지 확인합니다.
     * @example
     * await client.isLogin();
     * @returns 로그인 여부
     */
    isLogin(): Promise<boolean>;
    /**
     * ID와 비밀번호로 컬쳐랜드에 로그인합니다.
     * @param id 컬쳐랜드 ID
     * @param password 컬쳐랜드 비밀번호
     * @param captchaKey CapMonster API 키 (로그인 보안 그림 인증시 필요)
     * @param browserId 브라우저 아이디 `/assets/js/egovframework/com/cland/was/mmb/loginMain.js?version=1.0` L19
     * @param macAddress 임의의 MAC 주소 `/assets/js/egovframework/com/cland/was/mmb/loginMain.js?version=1.0` L28
     * @example
     * await client.login("test1234", "test1234!");
     * @returns `keepLoginInfo`: string - 로그인 유지 정보
     * @returns `browserId`: string - 브라우저 아이디
     * @returns `macAddress`: string - 임의의 MAC 주소
     */
    login(id: string, password: string, captchaKey?: string | null, browserId?: string | null, macAddress?: string | null): Promise<CulturelandLogin | CulturelandError>;
    /**
     * 로그인 유지 정보로 컬쳐랜드에 로그인합니다.
     * @param keepLoginInfo 로그인 유지 정보 `keepLoginConfig`
     * @param browserId 브라우저 아이디 `/assets/js/egovframework/com/cland/was/mmb/loginMain.js?version=1.0` L19
     * @param macAddress 임의의 MAC 주소 `/assets/js/egovframework/com/cland/was/mmb/loginMain.js?version=1.0` L28
     * @example
     * const keepLoginInfo = await cookieStore.get("KeepLoginConfig")
     *     .then(cookie => decodeURIComponent(cookie.value));
     *
     * await client.loginWithKeepLoginInfo(keepLoginInfo);
     * @returns `userId` 컬쳐랜드 ID
     * @returns `keepLoginInfo`?: string - 로그인 유지 쿠키
     * @returns `browserId`: string - 브라우저 아이디
     * @returns `macAddress`: string - 임의의 MAC 주소
     */
    loginWithKeepLoginInfo(keepLoginInfo: string, browserId?: string | null, macAddress?: string | null): Promise<CulturelandLoginWithKeepLoginInfo | CulturelandError>;
}
